/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (7.8.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package br.com.fiap.postech.products.api;

import br.com.fiap.postech.products.model.ErrorResponse;
import br.com.fiap.postech.products.model.ProductApiModel;
import br.com.fiap.postech.products.model.ProductCsvUploadResponse;
import br.com.fiap.postech.products.model.UpdateProductStockRequest;
import io.swagger.v3.oas.annotations.ExternalDocumentation;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.Parameters;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import io.swagger.v3.oas.annotations.tags.Tag;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.multipart.MultipartFile;

import jakarta.validation.Valid;
import jakarta.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.concurrent.CompletableFuture;
import jakarta.annotation.Generated;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", comments = "Generator version: 7.8.0")
@Validated
@Tag(name = "Product Management", description = "Endpoints for managing products.")
public interface ProductManagementApi {

    default ProductManagementApiDelegate getDelegate() {
        return new ProductManagementApiDelegate() {};
    }

    /**
     * POST /products : Create a new product
     * Adds a new product to the system.
     *
     * @param productApiModel Product request payload. (required)
     * @return Product successfully created. (status code 201)
     *         or Invalid request payload. (status code 400)
     *         or Internal server error. (status code 500)
     */
    @Operation(
        operationId = "createProduct",
        summary = "Create a new product",
        description = "Adds a new product to the system.",
        tags = { "Product Management" },
        responses = {
            @ApiResponse(responseCode = "201", description = "Product successfully created.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ProductApiModel.class))
            }),
            @ApiResponse(responseCode = "400", description = "Invalid request payload.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "500", description = "Internal server error.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/products",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    default CompletableFuture<ResponseEntity<ProductApiModel>> createProduct(
        @Parameter(name = "ProductApiModel", description = "Product request payload.", required = true) @Valid @RequestBody ProductApiModel productApiModel
    ) {
        return getDelegate().createProduct(productApiModel);
    }


    /**
     * DELETE /products/{id} : Delete a product by ID
     * Removes a product from the system.
     *
     * @param id Unique identifier of the product. (required)
     * @return Product successfully deleted. (status code 204)
     *         or Product not found. (status code 404)
     *         or Internal server error. (status code 500)
     */
    @Operation(
        operationId = "deleteProductById",
        summary = "Delete a product by ID",
        description = "Removes a product from the system.",
        tags = { "Product Management" },
        responses = {
            @ApiResponse(responseCode = "204", description = "Product successfully deleted."),
            @ApiResponse(responseCode = "404", description = "Product not found.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "500", description = "Internal server error.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.DELETE,
        value = "/products/{id}",
        produces = { "application/json" }
    )
    
    default CompletableFuture<ResponseEntity<Void>> deleteProductById(
        @Parameter(name = "id", description = "Unique identifier of the product.", required = true, in = ParameterIn.PATH) @PathVariable("id") Long id
    ) {
        return getDelegate().deleteProductById(id);
    }


    /**
     * GET /products : Retrieve all products
     * Fetches a list of all registered products.
     *
     * @return A list of products. (status code 200)
     *         or Internal server error. (status code 500)
     */
    @Operation(
        operationId = "getAllProducts",
        summary = "Retrieve all products",
        description = "Fetches a list of all registered products.",
        tags = { "Product Management" },
        responses = {
            @ApiResponse(responseCode = "200", description = "A list of products.", content = {
                @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = ProductApiModel.class)))
            }),
            @ApiResponse(responseCode = "500", description = "Internal server error.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/products",
        produces = { "application/json" }
    )
    
    default CompletableFuture<ResponseEntity<List<ProductApiModel>>> getAllProducts(
        
    ) {
        return getDelegate().getAllProducts();
    }


    /**
     * GET /products/{id} : Retrieve a product by ID
     * Fetches product details by its unique identifier.
     *
     * @param id Unique identifier of the product. (required)
     * @return Product details. (status code 200)
     *         or Product not found. (status code 404)
     *         or Internal server error. (status code 500)
     */
    @Operation(
        operationId = "getProductById",
        summary = "Retrieve a product by ID",
        description = "Fetches product details by its unique identifier.",
        tags = { "Product Management" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Product details.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ProductApiModel.class))
            }),
            @ApiResponse(responseCode = "404", description = "Product not found.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "500", description = "Internal server error.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/products/{id}",
        produces = { "application/json" }
    )
    
    default CompletableFuture<ResponseEntity<ProductApiModel>> getProductById(
        @Parameter(name = "id", description = "Unique identifier of the product.", required = true, in = ParameterIn.PATH) @PathVariable("id") Long id
    ) {
        return getDelegate().getProductById(id);
    }


    /**
     * PUT /products/{id} : Update a product by ID
     * Updates an existing product with new details.
     *
     * @param id Unique identifier of the product. (required)
     * @param productApiModel Product request payload. (required)
     * @return Product successfully updated. (status code 200)
     *         or Invalid request payload. (status code 400)
     *         or Product not found. (status code 404)
     *         or Internal server error. (status code 500)
     */
    @Operation(
        operationId = "updateProductById",
        summary = "Update a product by ID",
        description = "Updates an existing product with new details.",
        tags = { "Product Management" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Product successfully updated.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ProductApiModel.class))
            }),
            @ApiResponse(responseCode = "400", description = "Invalid request payload.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "404", description = "Product not found.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "500", description = "Internal server error.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.PUT,
        value = "/products/{id}",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    default CompletableFuture<ResponseEntity<ProductApiModel>> updateProductById(
        @Parameter(name = "id", description = "Unique identifier of the product.", required = true, in = ParameterIn.PATH) @PathVariable("id") Long id,
        @Parameter(name = "ProductApiModel", description = "Product request payload.", required = true) @Valid @RequestBody ProductApiModel productApiModel
    ) {
        return getDelegate().updateProductById(id, productApiModel);
    }


    /**
     * PATCH /products/update-stock : Update stock quantities for multiple products
     * Updates the stock quantities for a list of products.
     *
     * @param updateProductStockRequest  (required)
     * @return Stock quantities successfully updated. (status code 200)
     *         or Invalid request payload. (status code 400)
     *         or Product not found. (status code 404)
     *         or Internal server error. (status code 500)
     */
    @Operation(
        operationId = "updateProductStock",
        summary = "Update stock quantities for multiple products",
        description = "Updates the stock quantities for a list of products.",
        tags = { "Product Management" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Stock quantities successfully updated."),
            @ApiResponse(responseCode = "400", description = "Invalid request payload.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "404", description = "Product not found.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "500", description = "Internal server error.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.PATCH,
        value = "/products/update-stock",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    default CompletableFuture<ResponseEntity<Void>> updateProductStock(
        @Parameter(name = "UpdateProductStockRequest", description = "", required = true) @Valid @RequestBody List<@Valid UpdateProductStockRequest> updateProductStockRequest
    ) {
        return getDelegate().updateProductStock(updateProductStockRequest);
    }


    /**
     * POST /product-uploads : Upload a CSV file to create products
     * Adds new products to the system from a CSV file.
     *
     * @param file The CSV file containing product data. (optional)
     * @return Products successfully created. (status code 201)
     *         or Invalid request payload. (status code 400)
     *         or Internal server error. (status code 500)
     */
    @Operation(
        operationId = "uploadProductCsv",
        summary = "Upload a CSV file to create products",
        description = "Adds new products to the system from a CSV file.",
        tags = { "Product Management" },
        responses = {
            @ApiResponse(responseCode = "201", description = "Products successfully created.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ProductCsvUploadResponse.class))
            }),
            @ApiResponse(responseCode = "400", description = "Invalid request payload.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "500", description = "Internal server error.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/product-uploads",
        produces = { "application/json" },
        consumes = { "multipart/form-data" }
    )
    
    default CompletableFuture<ResponseEntity<ProductCsvUploadResponse>> uploadProductCsv(
        @Parameter(name = "file", description = "The CSV file containing product data.") @RequestPart(value = "file", required = false) MultipartFile file
    ) {
        return getDelegate().uploadProductCsv(file);
    }

}
